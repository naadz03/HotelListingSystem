@model HotelListingSystem.Models.CustomerQuery
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap4.min.css">
    <meta name="viewport" content="width=device-width" />
    <title>Update Reservation</title>
    @Html.Partial("_eHead")
    <style>
        .c_half_input {
            width: 177px;
        }

        .image-text {
            margin: 0 0 0 20px;
            height: 37.6px;
        }
    </style>
</head>
<body>
    <main>
        @using (Html.BeginForm("AdministratorCustomerQuery", "CustomerQuery", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <input type="text" hidden id="hiddenChecklists" name="hiddenChecklists" />
            <div class="form-horizontal">
                <h1 class="col-md-offset-2">Customer Query Log</h1>
                @Html.HiddenFor(model => model.Id, new { @Name = "Id" })
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <br />
                <br />
                <h5 class="col-md-offset-2">Customer Personal Details</h5>
                <hr class="col-md-offset-2" />
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer, "Customer Full Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Customer.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer, "Identification No.", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Customer.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer, "Mobile No.", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                    <div class="col-md-2 c_half_input">
                        @Html.EditorFor(model => model.Customer.MobileNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>

                    @Html.LabelFor(model => model.Customer, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2 c_half_input">
                        @Html.EditorFor(model => model.Customer.EmailAddress, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                </div>
                @if (HotelListingSystem.Models.AppHelper.CurrentHotelUser().Id != Model.Customer.Id)
                {
                    <hr class="col-md-offset-2" />
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" onclick="SendEmailNotification('@Model.Customer.EmailAddress', '@Model.Customer.FullName')" value="Send Email" class="btn btn-sm btn-success" />
                            @*<input type="submit" value="View Profile" class="btn btn-sm btn-secondary" />*@
                        </div>
                    </div>
                }


                <br />
                <br />
                <h5 class="col-md-offset-2">Customer Query Details</h5>
                <hr class="col-md-offset-2" />
                <div class="form-group">
                    @Html.LabelFor(model => model.Reservation, "Reservation", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @*@Html.DropDownList("ReservationId", (SelectList)ViewBag.Reservations, "---Select Option---", new { htmlAttributes = new { @class = "form-control", @required = "required" } })*@
                        @*@Html.DropDownList("Reservations", null, "-- Select Option --", htmlAttributes: new { @class = "form-control", @Id = "ApprovalStatus", @Name = "ReservationId", @required = "required" })*@
                        @Html.EditorFor(model => model.Reservation.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.ReservationId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Supporting Document", new { @class = "control-label col-md-2" })
                    <div class="col-md-7">
                        <a href='@Url.Action("DownloadFile", new { FileId = ViewBag.CustomerFileId })'><i class="fa fa-download"></i>@ViewBag.CustomerDocName</a>
                        <!--<input type="file" name="file" id="imageUpload"--> @*name="documents"*@ <!--class="control-label" accept=".png, .jpg, .jpeg, .pdf" disabled />-->
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.QueryDescription, "Query Description", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.TextAreaFor(model => model.QueryDescription, new { @class = "form-control", @disabled = "disabled", @style = "height: 85px;" })
                        @*@Html.TextArea("QueryDescription", new { @class = "form-control", @Id = "Comments", @required = "required" })*@
                        @Html.ValidationMessageFor(model => model.QueryDescription, "", new { @class = "text-danger", @disabled = "disabled" })
                    </div>
                </div>


                @if (!String.IsNullOrEmpty(Model.EscalationDesciption))
                {
                    <br />
                    <br />
                    <h5 class="col-md-offset-2">Receptionist Details</h5>
                    <hr class="col-md-offset-2" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Receptionist, "Receptionist Full Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Receptionist.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Receptionist, "Mobile No.", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                        <div class="col-md-2 c_half_input">
                            @Html.EditorFor(model => model.Receptionist.MobileNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>

                        @Html.LabelFor(model => model.Receptionist, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2 c_half_input">
                            @Html.EditorFor(model => model.Receptionist.EmailAddress, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>
                    </div>
                    if (HotelListingSystem.Models.AppHelper.CurrentHotelUser().Id != Model.Receptionist.Id)
                    {
                        <hr class="col-md-offset-2" />
                        <div class="form-group text-right">
                            <div class="col-md-offset-2 col-md-4">
                                <input type="button" onclick="SendEmailNotification('@Model.Receptionist.EmailAddress', '@Model.Receptionist.FullName')" value="Send Email" class="btn btn-sm btn-success" />
                            </div>
                        </div>
                    }


                    <br />
                    <br />
                    <h5 class="col-md-offset-2">Recepionist Query Details</h5>
                    <hr class="col-md-offset-2" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservation, "Action Status", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                            @Html.DropDownList("approvalStatus", new SelectList(new[]
                         {
                                  new SelectListItem { Text = "Escalate Customer Query - Open", Value = "c_query_escalated_opened" }
                                }, "Value", "Text"), new { @class = "form-control", @Name = "approvalStatus", @disabled = "disabled" })

                            @Html.ValidationMessage("approvalStatus", "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Escalation Document", new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            <a href='@Url.Action("DownloadFile", new { FileId = ViewBag.CustomerFileId })'><i class="fa fa-download"></i>@ViewBag.CustomerDocName</a>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EscalationDesciption, "Escalation Description", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.TextAreaFor(model => model.EscalationDesciption, new { @class = "form-control", @disabled = "disabled", @style = "height: 85px;" })
                            @Html.ValidationMessageFor(model => model.EscalationDesciption, "", new { @class = "text-danger", @disabled = "disabled" })
                        </div>
                    </div>


                }


                @if (!String.IsNullOrEmpty(Model.FinalDescription))
                {
                    <br />
                    <br />
                    <h5 class="col-md-offset-2">Administrator Details</h5>
                    <hr class="col-md-offset-2" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Receptionist, "Administrator Full Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Administrator.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Receptionist, "Mobile No.", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                        <div class="col-md-2 c_half_input">
                            @Html.EditorFor(model => model.Administrator.MobileNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>

                        @Html.LabelFor(model => model.Receptionist, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2 c_half_input">
                            @Html.EditorFor(model => model.Administrator.EmailAddress, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>
                    </div>

                    <hr class="col-md-offset-2" />
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" onclick="SendEmailNotification('@Model.Administrator.EmailAddress', '@Model.Administrator.FullName')" value="Send Email" class="btn btn-sm btn-success" />
                        </div>
                    </div>



                    <br />
                    <br />
                    <h5 class="col-md-offset-2">Capture Query Response Details</h5>
                    <hr class="col-md-offset-2" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservation, "Action Status", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-2">
                            @Html.DropDownList("approvalStatus", new SelectList(new[]
                         {
                                  new SelectListItem { Text = "Close Customer Query - Solved", Value = "c_query_solved_closed" },
                                }, "Value", "Text"), new { @class = "form-control", @Name = "approvalStatus", @required = "required", @disabled = "disabled" })
                            @Html.ValidationMessage("approvalStatus", "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Solution of Issue Document", new { @class = "control-label col-md-2" })
                        <div class="col-md-7">
                            <a href='@Url.Action("DownloadFile", new { FileId = ViewBag.AdminDocsFileId })'><i class="fa fa-download"></i>@ViewBag.AdminDocsName</a>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.FinalDescription, "Solution of Issue Description", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.TextAreaFor(model => model.FinalDescription, new { @class = "form-control", @required = "required", @style = "height: 85px;", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.FinalDescription, "", new { @class = "text-danger", @disabled = "disabled" })
                        </div>
                    </div>

                }

                <hr class="col-md-offset-2" />
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" value="Back To List" onclick="window.history.back()" class="btn btn-outline-warning" />
                        </div>
                </div>
            </div>
        }



    </main>
</body>
</html>
@Html.Partial("_eFooter")

<script>
    function goBack() {
        window.history.back();
    }

    function SendEmailNotification(email, userFullName) {
        let messageTitle = prompt("Please enter message tittle:");
        let messageBody = prompt("Please enter message body:");

        $.ajax({
            url: '@Url.Action("SendEmailNotification", "CustomerQuery")', // Update with your controller and action method names
            type: 'POST',
            data: { email: email, userFullName: userFullName, messageBody: messageBody, messageTitle: messageTitle },
            success: function (data) {
                if (data) {
                    alert('Your email has been sent out successfully.');
                } else {
                    alert('An error occured while trying to send your email, please try again.');
                }
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('An error occured while trying to send your email, please try again.');
            }
        });
    }
</script>

<script typeof="text/javascript">
    var docChecklists = [];
    const allowedExtensions = [".png", ".jpg", ".jpeg", ".pdf"];

    $(document).ready(function () {
        ////Proof of address
        $('#imageUpload').on('change', function (event) {

            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            if (hasOverSizeFile) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-image-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-image-info').val($(this).val());
                }

                var ProofFiles = $('#upload-image-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("imageError").style.display = 'none';
                }
            }
        });
    });
    function FormValidation() {
        var checkLists = JSON.stringify(docChecklists);
        $('#hiddenChecklists').val(checkLists);
        $('#create-form').submit();
    }
</script>