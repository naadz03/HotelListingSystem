@model HotelListingSystem.Models.Reservation
@using HotelListingSystem.Helpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap4.min.css">
    <meta name="viewport" content="width=device-width" />
    <title>Update Reservation</title>
    @Html.Partial("_eHead")
    <style>
        .c_half_input {
            width: 177px;
        }
    </style>
</head>
<body>
    <main>
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.HotelId)
        <div class="form-horizontal">
            <h1 class="col-md-offset-2">Details</h1>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <br />
            <br />
            <h5 class="col-md-offset-2">Personal Details</h5>
            <hr class="col-md-offset-2" />
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Reservation By User", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.HotelUser.FullName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Identification No.", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.HotelUser.IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HotelUser, "Mobile No.", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.HotelUser.MobileNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>

                @Html.LabelFor(model => model.HotelUser, "Email Address", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.HotelUser.EmailAddress, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                </div>
            </div>

            <hr class="col-md-offset-2" />
            <div class="form-group text-right">
                <div class="col-md-offset-2 col-md-4">
                    <input type="submit" value="Send Email" class="btn btn-sm btn-success" hidden />
                    <input type="submit" value="View Profile" class="btn btn-sm btn-secondary" />
                </div>
            </div>

            <br />
            <br />
            <h5 class="col-md-offset-2">Reservation Information</h5>
            <hr class="col-md-offset-2" />

            <div class="form-group">
                @Html.LabelFor(model => model.Hotel.Name, "Reserved Hotel", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Hotel.Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Hotel.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CheckInDate, "Check-In Date", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckInDate, new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "required", @Id = "CheckInId" } })
                    @Html.ValidationMessageFor(model => model.CheckInDate, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.CheckOutDate, "Check-Out Date", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckOutDate, new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "required", @Id = "CheckOutId" } })
                    @Html.ValidationMessageFor(model => model.CheckOutDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RoomId, "Room Type", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.DropDownListFor(model => model.RoomId, (SelectList)ViewBag.ThisHotelRooms, "--- Select Option ---", htmlAttributes: new { @class = "form-control", @Id = "RoomId", @required = "required" })
                    @Html.ValidationMessageFor(model => model.RoomId, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.NoOfRooms, "Number Of Room/s", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.NoOfRooms, new { htmlAttributes = new { @class = "form-control", @min = "1", @max = "50", @required = "required", @Id = "NoOfRooms" } })
                    @Html.ValidationMessageFor(model => model.NoOfRooms, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TotalCost, "Room Number", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.CheckInRoom.RooomNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.TotalCost, "Total Cost", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.TotalFees, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Id = "TotalCost" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
            </div>

            <hr class="col-md-offset-2" />
            <br />
            <br />
            <h5 class="col-md-offset-2">Hotel Add-Ons Details</h5>
            <hr class="col-md-offset-2" />
            <br />
            <div class="form-group">
                @Html.LabelFor(model => model.Hotel.Name, "Breakfast Menu", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                <div class="col-md-2 c_half_input">
                    @foreach (var breakfast in Model.breakfastmeals)
                    {
                        var Ischecked = (Model.Addons != null && Model.Addons.AddOns.Contains(breakfast.Id.ToString())) ? true : false;
                        <input type="checkbox" value="@breakfast.Id" name="selectedMeals" checked="@Ischecked" onchange="ChangeMenues('@breakfast.CostPerPerson', this.checked)" /> @Html.Raw($"{breakfast.Name} - {breakfast.CostPerPerson.ToString("C")}") <br />
                    }
                </div>
                @Html.LabelFor(model => model.Hotel.Name, "Breakfast Menu", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @foreach (var lunch in Model.lunchmeals)
                    {
                        var Ischecked = (Model.Addons != null && Model.Addons.AddOns.Contains(lunch.Id.ToString())) ? true : false;
                        <input type="checkbox" value="@lunch.Id" name="selectedMeals" checked="@Ischecked" onchange="ChangeMenues('@lunch.CostPerPerson', this.checked)" /> @Html.Raw($"{lunch.Name} - {lunch.CostPerPerson.ToString("C")}") <br />
                    }
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-md-offset-1" style="margin-left:55px;">
                </div>
                @Html.LabelFor(model => model.TotalCost, "Total Cost", htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2 c_half_input">
                    @Html.EditorFor(model => model.AddOnsCost, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Id = "TotalMealsId" } })
                    @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (Model.Booked == null)
            {
                <hr class="col-md-offset-2" />
                <div class="form-group text-right">
                    <div class="col-md-offset-2 col-md-4">
                        <input type="submit" value="Update" class="btn btn-sm btn-warning" />
                    </div>
                </div>


                <br />
                <br />
                <h5 class="col-md-offset-2">Make Payment</h5>
                <hr class="col-md-offset-2" />

                <div id="paymentId" class="hidden">
                    <br />

                    <div class="form-group" id="promoOptions" style="display:block">
                        @Html.LabelFor(model => model.RoomId, "Discount Method: ", htmlAttributes: new { @class = "control-label col-md-offset-1 col-md-1" })
                        <div class="col-md-2 c_half_input">
                            <label>
                                <input type="radio" name="discountSelect" value="None" onclick="changediscount('none')" checked />
                                None
                            </label>
                            <label>
                                <input type="radio" name="discountSelect" value="Cupon" onclick="changediscount('cupon')" />
                                Cupon
                            </label>
                            @if (ReservationHelper.GetMinumumUserPoints() > 50)
                            {
                                <label>
                                    <input type="radio" name="discountSelect" value="Points" onclick="changediscount('point')" />
                                    Points
                                </label>
                            }

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RoomId, "Payment Method", htmlAttributes: new { @class = "control-label col-md-1 col-md-offset-1" })
                        <div class="col-md-2 c_half_input">
                            @Html.DropDownListFor(model => model.RoomId, new List<SelectListItem>
                            {
                                new SelectListItem { Value = "a_paypal_payment", Text = "Paypal" },
                                new SelectListItem { Value = "a_yoco_payment_method", Text = "Credit/Debit" }
                            }, htmlAttributes: new { @class = "form-control", @onchange = "ChangePaymentMethod(this.value)" })
                            @Html.ValidationMessageFor(model => model.RoomId, "", new { @class = "text-danger" })
                        </div>
                        <div id="cuponDivHidden" style="display:none">
                            @Html.LabelFor(model => model.RoomId, "Cupon Code", htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-2 c_half_input">
                                @Html.Editor("Cupon", new { htmlAttributes = new { @class = "form-control", @Id = "Cupon", @onfocusout = "ValidatePromoOrCupon(this.value)" } })
                            </div>
                        </div>
                        <div id="pointDivHidden" style="display:none">
                            @Html.LabelFor(model => model.RoomId, "Enter points", htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-2 c_half_input">
                                @Html.Editor("Cupon", new { htmlAttributes = new { @class = "form-control",@type="number", @Id = "pointsystem", @onfocusout = "ValidatePoints(this.value)", @placeholder = "Enter points" } })
                            </div>
                        </div>
                    </div>

                    <hr class="col-md-offset-2" />
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" value="Paypal Pay Now" onclick="window.location.href='@Url.Action("Create", "Payments", new { id = Model.Id })'" class="btn btn-sm btn-primary" id="paypalPayment" />
                            <button class="btn btn-sm btn-warning" id="cardPaymentButton" style="display:none;">Debit/Credit Card Payment</button>
                        </div>
                    </div>
                    <input type="text" style="display:none" id="totalhidden" />
                </div>

                <div id="FacialRecognitionId">
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" onclick="StratMeetingKYCModal()" value="Proceed To Payment" class="btn btn-sm btn-outline-warning fa fa-arrow-circle-left" id="FaceIdbtn" />
                        </div>
                    </div>
                </div>
            }
            else
            {


                <hr class="col-md-offset-2" />
                if (Model.CheckInConfirmed)
                {
                    <div class="form-group text-right">
                        <div class="col-md-offset-2 col-md-4">
                            <input type="button" value="Back To List" onclick="goBack()" class="btn btn-sm btn-outline-warning" />
                        </div>
                    </div>
                }
                <div class="form-group text-right">
                    <div class="col-md-offset-2 col-md-4">
                        <input type="button" value="Back To List" onclick="goBack()" class="btn btn-sm btn-outline-warning" />
                    </div>
                </div>

            }


    </main>
</body>
</html>



<div id="SubmitModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modalTitleText">KYC - Reservation</h4>
            </div>
            <input type="text" id="LivenessCheckId" hidden />
            <div class="modal-body">
                <div class="container col-md-8">
                    <div class="form-horizontal">
                        <div id="2nd_section">
                            <div class="row mRow col-md-8">
                                <div class="form-group">
                                    <div class="alert alert-success" style=" width: 430px; font-family: ui-monospace; font-style: italic;" id="AMYAlert">
                                        <p>Please take a clear selfie of your face</p>
                                    </div>
                                </div>
                            </div>
                            <div class="row mRow col-md-8">
                                <div class="form-group" id="divSelfieCapture">
                                    <video id="Selfievideo" width="480" height="380" autoplay></video>
                                    <canvas id="Selfiecanvas" width="480" height="380" class="hidden"></canvas>
                                </div>
                            </div>
                            <div class="row mRow cButtons col-md-8">
                                <div class="form-group c_bun_vids" style="justify-content:stretch">
                                    <button id="capture2" class="col-md-offset-2 btn btn-sm btn-outline-warning fa fa-arrow-circle-left">Capture</button>
                                    <button id="retake2" class="btn btn-sm btn-outline-warning fa fa-arrow-circle-left hidden">Retake</button>
                                    <button id="finishCapture" class="btn btn-sm btn-outline-warning fa fa-arrow-circle-left hidden">Proceed</button>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Html.Partial("_eFooter")
<script>
    function changediscount(choice) {
        if (choice == 'none') {
            $('#pointDivHidden').hide();
            $('#cuponDivHidden').hide();
        }
        if (choice == 'cupon') {
            $('#pointDivHidden').hide();
            $('#cuponDivHidden').show();
        }
        if (choice == 'point') {
            $('#pointDivHidden').show();
            $('#cuponDivHidden').hide();
        }
    }
</script>
<script>
    const selfievideo = document.getElementById('Selfievideo');
    const canvas = document.getElementById('Selfiecanvas');
    const retakeBtn = document.getElementById('retake2');
    const finishCapture = document.getElementById('finishCapture');
    const captureBtn = document.getElementById('capture2');
    const context = canvas.getContext('2d');
    let isUsingRearCamera = true;
    let videoStream;
    navigator.mediaDevices.getUserMedia({ video: true })
        .then((stream) => {
            selfievideo.srcObject = stream;
            videoStream = stream;
        })
        .catch((err) => {
            console.log(`Error: ${err}`);
        });
    // To close the video stream
    function closeVideoStream() {
        // Check if the stream is available
        if (videoStream) {
            // Get the tracks from the stream
            const tracks = videoStream.getTracks();
            // Stop each track
            tracks.forEach((track) => {
                track.stop();
            });
            // Reset the video stream reference
            videoStream = null;
        }
    }
    selfievideo.addEventListener('loadedmetadata', () => {
        captureBtn.addEventListener('click', () => {
            canvas.classList.remove('hidden');
            retakeBtn.classList.remove('hidden');
            finishCapture.classList.remove('hidden');
            captureBtn.classList.add('hidden');
            selfievideo.classList.add('hidden');
            context.drawImage(selfievideo, 0, 0, 480, 380);
            const imgData = canvas.toDataURL('image/png');
            debugger;
            document.getElementById('LivenessCheckId').value = imgData;
            $('#LivenessCheckId').val(imgData);
            const link = document.createElement('a');
            link.download = 'image.png';
            link.href = imgData;
        });
    });


    retakeBtn.addEventListener('click', () => {
        canvas.classList.add('hidden'); // hide the canvas element
        retakeBtn.classList.add('hidden'); // hide the retake button
        finishCapture.classList.add('hidden'); // hide the retake button
        captureBtn.classList.remove('hidden'); // show the capture button
        selfievideo.classList.remove('hidden'); // show the video element
    });

    finishCapture.addEventListener('click', () => {
        closeVideoStream()
        debugger;
        let LiveImage = document.getElementById('LivenessCheckId').value;
        let reservationId = '@Model.Id';
        const paymentdiv = document.getElementById('paymentId');
        const livenessBtn = document.getElementById('FaceIdbtn');
        $('#SubmitModal').modal('hide');
        $.ajax({
            url: '@Url.Action("SubmitLiveImage", "Reservations")',
            type: 'POST',
            data: { reservationId: reservationId, LiveBase64: LiveImage },
            success: function (data) {
                debugger;
                if (data) {
                    livenessBtn.classList.add('hidden'); // hide the retake button
                    paymentdiv.classList.remove('hidden'); // show the capture button
                } else {
                    alert("Could not process your liveness image. Please try again later.");
                }
            },
            error: function (xhr, textStatus, errorThrown) {
                console.error(errorThrown);
            }
        })

    });
</script>


<!-- Include the Yoco SDK in your web page -->
<script src="https://js.yoco.com/sdk/v1/yoco-sdk-web.js"></script>

<!-- Create a pay button that will open the popup-->
@*<button id="checkout-button">Pay</button>*@

@*<script type="text/javascript">
        var yoco = new window.YocoSDK({

            publicKey: 'pk_test_ed3c54a6gOol69qa7f45',
        });
        var checkoutButton = document.querySelector('#cardPaymentButton');
        checkoutButton.addEventListener('click', function () {
            debugger
            yoco.showPopup({
                amountInCents: 2799,
                currency: 'ZAR',
                name: 'Your Store or Product',
                description: 'Awesome description',
                callback: function (result) {
                    debugger;
                    // This function returns a token that your server can use to capture a payment
                    if (result.error) {
                        const errorMessage = result.error.message;
                        alert("error occured: " + errorMessage);
                    } else {
                        alert("card successfully tokenised: " + result.id);
                    }
                    // In a real integration - you would now pass this chargeToken back to your
                    // server along with the order/basket that the customer has purchased.
                }
            })
        });
    </script>*@


<script>



    function StratMeetingKYCModal() {
        $('#SubmitModal').modal({
            backdrop: 'static',
            keyboard: false,
            show: true
        });


        const selfievideoOpen = document.getElementById('Selfievideo');
        navigator.mediaDevices.getUserMedia({ video: true })
            .then((stream) => {
                selfievideoOpen.srcObject = stream;
            })
            .catch((err) => {
                console.log(`Error: ${err}`);
            });

    }



    function ChangePaymentMethod(paymentMethod) {
        switch (paymentMethod) {
            case "a_paypal_payment":
                $('#cardPaymentButton').hide();
                $('#paypalPayment').show();
                break;
            case "a_yoco_payment_method":
                $('#cardPaymentButton').show();
                $('#paypalPayment').hide();
                break;
        }
    }



    function formatdate(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, "0");
        var day = date.getDate().toString().padStart(2, "0");
        var formattedDate = year + "-" + month + "-" + day;
        return formattedDate;
    }

    $(document).ready(function () {
        document.getElementById("CheckOutId").value = formatdate(new Date('@Model.CheckOutDate'));
        document.getElementById("CheckInId").value = formatdate(new Date('@Model.CheckInDate'));
        @*document.getElementById("TotalMealsId").value = formatdate(new Date('@(Model.AddOnsCost!=null? Model.AddOnsCost:0)'));*@
    });
</script>


<!-- Include the Yoco SDK in your web page -->
<script src="https://js.yoco.com/sdk/v1/yoco-sdk-web.js"></script>

<!-- Create a pay button that will open the popup-->
@*<button id="checkout-button">Pay</button>*@

<script type="text/javascript">
    var yoco = new window.YocoSDK({

        publicKey: 'pk_test_ed3c54a6gOol69qa7f45',
    });
    var checkoutButton = document.querySelector('#cardPaymentButton');
    checkoutButton.addEventListener('click', function () {
        debugger;
        const totalhidden = document.getElementById('totalhidden').value;
        let amount = '';
        if (totalhidden !== null && totalhidden !== '')
            amount = totalhidden
        else
            amount = '@Model.TotalCost.ToString().Split('.').ToList()[0].Replace(',','.')';
        amount = amount * 100;
        yoco.showPopup({
            amountInCents: amount,
            currency: 'ZAR',
            name: 'Travelix: @Model.Hotel.Name',
            description: 'An awseome reservation for you.',
            callback: function (result) {
                debugger;
                // This function returns a token that your server can use to capture a payment
                if (result.error) {
                    const errorMessage = result.error.message;
                    alert("error occured: " + errorMessage);
                } else {

                    debugger
                    $('#pointDivHidden').hide();
                    $('#cuponDivHidden').hide();
                    $('#promoOptions').hide();

                    $.ajax({
                        url: '@Url.Action("CreditDebitPaymentYoco", "Payments")',
                        type: 'POST',
                        data: { reservationId: '@Model.Id', yocco_ref: result.id },
                        success: function (data) {
                            if (!data) {
                                alert('An error has occurd!');
                            } else {
                                alert('Hi @Model.HotelUser.FullName, thank you for your payment')
                                window.location.reload();
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.error(errorThrown);
                        }
                    })
                }
            }
        })
    });
</script>


<script>
    document.querySelector('.button_see_holtel').addEventListener('click', function () {
        const element = document.querySelector('#mainId');
        element.scrollIntoView({
            behavior: 'smooth'
        });
    });

    function goBack() {
        window.history.back();
    }
    function ValidatePromoOrCupon(cupon) {
        if (cupon !== '' && cupon !== null) {
            $.ajax({
                url: '@Url.Action("ValidateCupon", "Cupons")',
                type: 'POST',
                data: { Code: cupon, id: '@Model.Id' },
                success: function (data) {
                    if (data.status) {
                        alert("Cupon Activated")
                        let amount = '@Model.TotalCost.ToString().Split('.').ToList()[0].Replace(',','.')';
                        if (data.cupon.IsPercentage) {
                            amount -= amount * (data.cupon.Amount / 100);
                        } else {
                            amount -= data.cupon.Amount;
                        }
                        $('#pointDivHidden').hide();
                        $('#cuponDivHidden').hide();
                        $('#promoOptions').hide();
                        $('#totalhidden').val(amount);
                    } else {
                        $('#Cupon').val('');
                        alert(data.message);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
        }
    }

    function ValidatePoints(cupon) {
        if (cupon !== '' && cupon !== null) {
            if (cupon < 500) {
                alert('The minumum points to use is 500')
                return false;
            }

            $.ajax({
                url: '@Url.Action("ValidatePoints", "Cupons")',
                type: 'POST',
                data: { points: cupon },
                success: function (data) {
                    alert('Points have been applied to your payment');
                    let amount = '@Model.TotalCost.ToString().Split('.').ToList()[0].Replace(',','.')';
                    amount -= (cupon / 10);
                    $('#totalhidden').val(amount);
                    $('#pointDivHidden').hide();
                    $('#cuponDivHidden').hide();
                    $('#promoOptions').hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
        }
    }

    function ChangeMenues(price, status) {
        debugger;
        let totalCost = parseFloat(document.getElementById('TotalMealsId').value);
        if (status == true) {
            var local = parseInt(totalCost) + parseInt(price);
            $("#TotalMealsId").val(local);
        } else {
            var local = parseInt(totalCost) - parseInt(price);
            $("#TotalMealsId").val(parseInt(local));
        }
    }

    function ChangePaymentMethod(paymentMethod) {
        switch (paymentMethod) {
            case "a_paypal_payment":
                $('#cardPaymentButton').hide();
                $('#paypalPayment').show();
                break;
            case "a_yoco_payment_method":
                $('#cardPaymentButton').show();
                $('#paypalPayment').hide();
                break;
        }
    }



    function formatdate(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, "0");
        var day = date.getDate().toString().padStart(2, "0");
        var formattedDate = year + "-" + month + "-" + day;
        return formattedDate;
    }

    $(document).ready(function () {
        @*document.getElementById("CheckOutId").value = formatdate(new Date('@Model.CheckOutDate'));
        document.getElementById("CheckInId").value = formatdate(new Date('@Model.CheckInDate'));*@

        // Get the current date
        var today = new Date();

        // Format the current date as yyyy-mm-dd
        var formattedDate = today.toISOString().split('T')[0];

        // Set the minimum attribute of the input field to today's date
        document.getElementById('CheckInId').setAttribute('min', formattedDate);

        // Set the maximum attribute of the input field to a future date
        var futureDate = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()); // Adjust as needed
        var formattedFutureDate = futureDate.toISOString().split('T')[0];
        document.getElementById('CheckInId').setAttribute('max', formattedFutureDate);



        // Get tomorrow's date
        var tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        // Format tomorrow's date as yyyy-mm-dd
        formattedDate = tomorrow.toISOString().split('T')[0];

        // Set the minimum attribute of the input field to tomorrow's date
        document.getElementById('CheckOutId').setAttribute('min', formattedDate);


    });


    $("#RoomId").on('change', function myfunction() {
        var noOfRooms = $("#NoOfRooms").val();
        var roomId = $("#RoomId").val();
            $.ajax({
                url: '@Url.Action("GetTotalCost", "Reservations")',
                type: 'POST',
                data: { roomId: roomId, noOfRooms: noOfRooms },
                success: function (data) {
                    if (data.success) {
                        $("#TotalCost").val(data.message)
                    } else {
                        alert(data.message);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
    });
    $("#NoOfRooms").on('change', function myfunction() {
        var noOfRooms = $("#NoOfRooms").val();
        var roomId = $("#RoomId").val();
            $.ajax({
                url: '@Url.Action("GetTotalCost", "Reservations")',
                type: 'POST',
                data: { roomId: roomId, noOfRooms: noOfRooms },
                success: function (data) {
                    if (data.success) {
                        $("#TotalCost").val(data.message)
                    } else {
                        alert(data.message);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                }
            })
    });
</script>
