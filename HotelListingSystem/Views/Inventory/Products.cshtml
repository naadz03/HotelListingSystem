@model IEnumerable<HotelListingSystem.Models.Product>

@{
    ViewBag.Title = "Products";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap4.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Page</title>
    @Html.Partial("_eHead")

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
        }

        h1, h2 {
            margin-bottom: 10px;
        }

        .product-list {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
        }

        .product {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px;
            text-align: center;
        }

            .product img {
                max-width: 250px;
                max-height: 250px;
                margin-bottom: 15px;
            }

        .add-to-cart {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }

        .cart {
            margin-top: 20px;
            width: 70%;
            margin-left: 15%;
        }

        .cart-items {
            list-style: none;
            padding: 0;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px;
            border-bottom: 1px solid #ccc;
        }

        form {
            display: flex;
            flex-direction: row;
            align-items: center;
        }

        label {
            margin-right: 10px;
        }

        input[type="text"] {
            width: 200px; /* Adjust width as needed */
        }

        input[type="submit"] {
            margin-left: 10px;
        }
    </style>
</head>



<body style="background-color: #96969633;">
    <main style="margin-left: 40px; margin-right: 40px; background-color: whitesmoke; padding:40px; border-radius:8px;box-shadow:revert;">
        <h1>Inventory Products <button type="button" onclick="window.location.href='/Inventory/RequestProduct'" class="add-to-cart btn btn-sm btn-outline-warning"style="margin-left:10px;">Request Product<span class="fa fa-pencil" style="margin:3px;"></span></button></h1>
        <hr style="width:100%" />
        <form action="/Inventory/Products" method="get" style="margin-bottom:20px;">
            <input type="text" name="search" class="form-control" placeholder="search here.. Mop"><br><br>
            <button type="submit" class="btn btn-sm btn-info" style="width: 50px; margin: 3px;"><span class="fa fa-search" style="margin:3px;"></span></button>
            <button type="button" class="btn btn-sm btn-info" onclick="window.location.href='/Inventory/Products?search='" style="width: 50px; margin: 3px;"><span class="fa fa-undo" style="margin:3px;"></span></button>
            @*<input type="submit" value="Submit">*@
        </form>


        <div class="product-list">
            @foreach (var item in Model)
            {
                <div class="product">
                    <img src="https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png" alt="Product 1">
                    <h2 style="max-width:250px;">@Html.Raw(item.Name.ToString().ToUpperInvariant())</h2>
                    <h3 hidden>@Html.Raw(item.Description)</h3>
                    <p style="max-width:250px;"> @Html.Raw(item.Description)</p>
                    <button class="add-to-cart btn btn-sm btn-primary">Add to Cart<span class="fa fa-shopping-bag" style="margin:3px;"></span></button>
                </div>
            }
            <!-- Add more product items here -->
        </div>
        <!-- ... (previous HTML code) ... -->

        <div class="cart">
            <hr style="width:100%; margin-top:50px;" />
            <h2>Basket <span class="fa fa-shopping-bag" style="margin:3px;"></span></h2>
            <ul class="cart-items">
                <!-- Cart items will be added dynamically using JavaScript -->
            </ul>
            <button class="checkout-button btn btn-sm btn-outline-primary">Proceed to Checkout<span class="fa fa-shopping-cart" style="margin:3px;"></span></button>
        </div>

        <!-- ... (rest of the HTML code) ... -->
        @*<script src="script.js"></script>*@
    </main>

</body>
</html>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap4.min.css">
@Html.Partial("_eFooter")
<script>
    const addToCartButtons = document.querySelectorAll('.add-to-cart');
    const cartItemsList = document.querySelector('.cart-items');

    cartItemsList.addEventListener('click', (event) => {
        if (event.target.classList.contains('remove-item')) {
            const cartItem = event.target.closest('.cart-item');
            cartItem.remove();
        }
    });

    addToCartButtons.forEach(button => {
        button.addEventListener('click', addToCart);
    });

    function addToCart(event) {
        const product = event.target.parentElement;
        const productName = product.querySelector('h2').textContent;
        const productCategory = product.querySelector('h3').textContent;
        const productPrice = parseFloat(product.querySelector('p').textContent.replace('$', ''));

        // Check if the item is already in the cart
        const existingCartItem = Array.from(cartItemsList.children).find(item =>
            item.querySelector('span.product-name').textContent === productName
        );

        if (existingCartItem) {
            const quantityElement = existingCartItem.querySelector('.quantity');
            const currentQuantity = parseInt(quantityElement.textContent, 10);
            quantityElement.textContent = currentQuantity + 1 +" x Item";
        } else {
            const cartItem = document.createElement('li');
            cartItem.classList.add('cart-item');
            cartItem.innerHTML = `
                    <span class="product-name" style="width:30%;">${productName}</span>
                    <span class="product-description" style="width:40%;">${productCategory}</span>
                    <span class="quantity" style="width:20%;">1 x Item</span>
                    <button class="remove-item btn btn-sm btn-outline-danger" style="width:10%;">Remove<span class="fa fa-trash" style="margin:3px;"></button>
                `;

            cartItemsList.appendChild(cartItem);
        }
    }

    // ... (previous JavaScript code) ...

    const checkoutButton = document.querySelector('.checkout-button');
    checkoutButton.addEventListener('click', checkout);

    function checkout() {
        const cartItems = document.querySelectorAll('.cart-item');

        if (cartItems.length === 0) {
            Swal.fire('Warning', 'Your cart is empty. Add some items before proceeding to checkout.', 'warning').then(() => {
                /*location.reload();*/
            });
            //alert("Your cart is empty. Add some items before proceeding to checkout.");
            return;
        }

        let total = 0;
        let msg = "";
        cartItems.forEach(item => {
            const itemname = item.querySelector('.product-name').textContent;
            const quantity = parseInt(item.querySelector('.quantity').textContent.replace(" x Item", ""));
            if (msg !== "")
                msg += `\n${quantity} x ${itemname}`;
            else
                msg = `${quantity} x ${itemname}`;
        });
        Swal.fire({
            title: 'Confirmation',
            text: 'Are you sure you want to proceed?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {

                let selected = "";
                cartItems.forEach(item => {
                    const itemname = item.querySelector('.product-name').textContent;
                    const quantity = parseInt(item.querySelector('.quantity').textContent.replace(" x Item", ""));
                    if (selected !== "")
                        selected += `|[${quantity}-${itemname}]`;
                    else
                        selected = `[${quantity}-${itemname}]`;
                });
                $.ajax({
                    url: '@Url.Action("checkoutProducts", "Inventory")',
                    type: 'POST',
                    data: { products: selected },
                    success: function (data) {
                        if (data) Swal.fire('Confirmed!', 'The event has been ' + value + ' successfully.', 'success').then(() => {
                            location.reload();
                        });
                        else Swal.fire('Cancelled', 'An error has occured while trying to process your request.', 'error').then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.error(errorThrown);
                    }
                  })
                cartItemsList.innerHTML = ''; // Clear cart after checkout
                Swal.fire('Confirmed!', 'Products checkedout successully', 'success').then(() => {
                    location.reload();
                });
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                Swal.fire('Cancelled', 'Your action has been cancelled.', 'error');
            }
        });
        //alert(`Below are the items you're checking out,\n${msg}\n\nThank you for your purchase!`);

    }
</script>