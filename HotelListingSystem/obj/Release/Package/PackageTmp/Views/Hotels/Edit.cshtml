@model HotelListingSystem.Models.Hotel

@{
    ViewBag.Title = "Edit";
    Layout = null;
}
<head>
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/styles/bootstrap4/bootstrap.min.css">
    <link href="https://preview.colorlib.com/theme/travelix/plugins/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/plugins/OwlCarousel2-2.2.1/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/plugins/OwlCarousel2-2.2.1/owl.theme.default.css">
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/plugins/OwlCarousel2-2.2.1/animate.css">
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/styles/main_styles.css">
    <link rel="stylesheet" type="text/css" href="https://preview.colorlib.com/theme/travelix/styles/responsive.css">
    <script defer="" referrerpolicy="origin" src="https://preview.colorlib.com/cdn-cgi/zaraz/s.js?z=JTdCJTIyZXhlY3V0ZWQlMjIlM0ElNUIlNUQlMkMlMjJ0JTIyJTNBJTIyVHJhdmVsaXglMjIlMkMlMjJ4JTIyJTNBMC45MzA1Mjc0NDk4Mjk3MzE2JTJDJTIydyUyMiUzQTE1MzYlMkMlMjJoJTIyJTNBODY0JTJDJTIyaiUyMiUzQTQ5MiUyQyUyMmUlMjIlM0ExNTM2JTJDJTIybCUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGcHJldmlldy5jb2xvcmxpYi5jb20lMkZ0aGVtZSUyRnRyYXZlbGl4JTJGJTIyJTJDJTIyciUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGcHJldmlldy5jb2xvcmxpYi5jb20lMkYlMjIlMkMlMjJrJTIyJTNBMjQlMkMlMjJuJTIyJTNBJTIyVVRGLTglMjIlMkMlMjJvJTIyJTNBLTEyMCUyQyUyMnElMjIlM0ElNUIlNUQlN0Q="></script>
    <script nonce="c7fcf528-52c2-46a1-8687-57b3181fb929">
        (function (w, d) {
            ! function (a, b, c, d) {
                a[c] = a[c] || {};
                a[c].executed = [];
                a.zaraz = {
                    deferred: [],
                    listeners: []
                };
                a.zaraz.q = [];
                a.zaraz._f = function (e) {
                    return function () {
                        var f = Array.prototype.slice.call(arguments);
                        a.zaraz.q.push({
                            m: e,
                            a: f
                        })
                    }
                };
                for (const g of ["track", "set", "debug"]) a.zaraz[g] = a.zaraz._f(g);
                a.zaraz.init = () => {
                    var h = b.getElementsByTagName(d)[0],
                        i = b.createElement(d),
                        j = b.getElementsByTagName("title")[0];
                    j && (a[c].t = b.getElementsByTagName("title")[0].text);
                    a[c].x = Math.random();
                    a[c].w = a.screen.width;
                    a[c].h = a.screen.height;
                    a[c].j = a.innerHeight;
                    a[c].e = a.innerWidth;
                    a[c].l = a.location.href;
                    a[c].r = b.referrer;
                    a[c].k = a.screen.colorDepth;
                    a[c].n = b.characterSet;
                    a[c].o = (new Date).getTimezoneOffset();
                    if (a.dataLayer)
                        for (const n of Object.entries(Object.entries(dataLayer).reduce(((o, p) => ({
                            ...o[1],
                            ...p[1]
                        }))))) zaraz.set(n[0], n[1], {
                            scope: "page"
                        });
                    a[c].q = [];
                    for (; a.zaraz.q.length;) {
                        const q = a.zaraz.q.shift();
                        a[c].q.push(q)
                    }
                    i.defer = !0;
                    for (const r of [localStorage, sessionStorage]) Object.keys(r || {}).filter((t => t.startsWith("_zaraz_"))).forEach((s => {
                        try {
                            a[c]["z_" + s.slice(7)] = JSON.parse(r.getItem(s))
                        } catch {
                            a[c]["z_" + s.slice(7)] = r.getItem(s)
                        }
                    }));
                    i.referrerPolicy = "origin";
                    i.src = "/cdn-cgi/zaraz/s.js?z=" + btoa(encodeURIComponent(JSON.stringify(a[c])));
                    h.parentNode.insertBefore(i, h)
                };
                ["complete", "interactive"].includes(b.readyState) ? zaraz.init() : a.addEventListener("DOMContentLoaded", zaraz.init)
            }(w, d, "zarazData", "script");
        })(window, document);
    </script>
    @Html.Partial("_eHead")
</head>
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/v2b4487d741ca48dcbadcaf954e159fc61680799950996" integrity="sha512-D/jdE0CypeVxFadTejKGTzmwyV10c1pxZk/AqjJuZbaJwGMyNHY3q/mTPWqMUnFACfCTunhZUVcd4cV78dK1pQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;7ba67c59f8dc0392&quot;,&quot;token&quot;:&quot;cd0b4b3a733644fc843ef0b185f98241&quot;,&quot;version&quot;:&quot;2023.3.0&quot;,&quot;si&quot;:100}" crossorigin="anonymous"></script>
<script src="https://preview.colorlib.com/theme/travelix/js/jquery-3.2.1.min.js"></script>
<script src="https://preview.colorlib.com/theme/travelix/plugins/easing/easing.js"></script>
<script src="https://preview.colorlib.com/theme/travelix/plugins/OwlCarousel2-2.2.1/owl.carousel.js"></script>
<script src="https://preview.colorlib.com/theme/travelix/styles/bootstrap4/bootstrap.min.js"></script>
<script src="https://preview.colorlib.com/theme/travelix/styles/bootstrap4/popper.js"></script>
<script src="https://preview.colorlib.com/theme/travelix/js/custom.js"></script>
<style>
    body {
        background-color: lightgrey;
        color: black;
    }
    .PageBody{
        margin:200px 0 0 0;

    }
    .container_body {
        margin-left: 40px;
        margin-right: 20px;
    }
    .control-label {
        font-weight:600;
    }
    .form-control {
        color:black;
    }
    .image-text{
        margin: 0 0 0 20px;
        height: 37.6px;
    }
    hr{
        width:70%;
    }
</style>

<body>
    <div class="container_body">
        <div class="PageBody" id="PageBody">
            @using (Html.BeginForm("Edit", "Hotels", null, FormMethod.Post, new { enctype = "multipart/form-data", id = "create-form" }))
            {
                @Html.AntiForgeryToken()
                <input type="text" hidden id="hiddenChecklists" name="hiddenChecklists" />
                @Html.HiddenFor(x => x.HotelUserId)
                @Html.HiddenFor(x => x.Id)
                <div class="form-horizontal">
                    <h4>Edit Hotel</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, "Hotel Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MaxOccupancy, "Maximum Occupancy", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.MaxOccupancy, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaxOccupancy, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Suburb, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Suburb, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Suburb, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PhysicalAddressCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.PhysicalAddressCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhysicalAddressCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Tour360Id, "360 Tour Identifier", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Tour360Id, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Tour360Id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Hotel Image:", new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            <div class="input-group">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                        Browse&hellip; <input type="file" id="imageUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                                    </span>
                                </label>
                                <input type="text" class="form-control col-md-5 image-text" id="upload-image-info" readonly>
                            </div>
                            <span class="text-danger" style="display:none" id="imageError"></span>

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Certificate Of Occupancy Doc:", new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            <div class="input-group">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                        Browse&hellip; <input type="file" id="CertificateOfOccupancyDocUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                                    </span>
                                </label>
                                <input type="text" class="form-control col-md-5 image-text" id="upload-CertificateOfOccupancyDoc-info" readonly>
                            </div>
                            <span class="text-danger" style="display:none" id="CertificateOfOccupancyDocError"></span>

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("COA Doc:", new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            <div class="input-group">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                        Browse&hellip; <input type="file" id="COAUpload" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                                    </span>
                                </label>
                                <input type="text" class="form-control col-md-5 image-text" id="upload-COAUpload-info" readonly>
                            </div>
                            <span class="text-danger" style="display:none" id="COAError"></span>

                        </div>
                    </div>
                    
                    <div style="display:none">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IsVerified, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsVerified, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.IsVerified, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentPaid, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.PaymentPaid, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.PaymentPaid, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PaymentDoneDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.PaymentDoneDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.PaymentDoneDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Blacklisted, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.Blacklisted, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.Blacklisted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-4">
                            @*<input type="submit" value="Create" class="btn btn-primary" />*@
                            <input type="button" onclick="FormValidation()" value="Update" class="btn btn-success" />

                        </div>
                    </div>
                </div>
            }

        </div>

    </div>
    @Html.Partial("_eFooter")
</body>



<script typeof="text/javascript">
    var docChecklists = [];
    const allowedExtensions = [".png", ".jpg", ".jpeg", ".pdf"];



    $(document).ready(function () {
        ////Proof of address
        $('#imageUpload').on('change', function (event) {

            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-proof-info').val("");
                document.getElementById("imageError").style.display = 'block';
                document.getElementById("imageError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-image-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-image-info').val($(this).val());
                }

                var ProofFiles = $('#upload-image-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("imageError").style.display = 'none';
                }
            }
        });


        $('#COAUpload').on('change', function (event) {
            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-COAUpload-info').val("");
                document.getElementById("COAError").style.display = 'block';
                document.getElementById("COAError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-COAUpload-info').val("");
                document.getElementById("COAError").style.display = 'block';
                document.getElementById("COAError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-COAUpload-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-COAUpload-info').val($(this).val());
                }

                var ProofFiles = $('#upload-COAUpload-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("COAError").style.display = 'none';
                }
            }
        });





        ////CertificateOfOccupancyDocUpload
        $('#CertificateOfOccupancyDocUpload').on('change', function (event) {
            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-CertificateOfOccupancyDoc-info').val("");
                document.getElementById("CertificateOfOccupancyDocError").style.display = 'block';
                document.getElementById("CertificateOfOccupancyDocError").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-proof-info').val("");
                document.getElementById("CertificateOfOccupancyDocError").style.display = 'block';
                document.getElementById("CertificateOfOccupancyDocError").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-CertificateOfOccupancyDoc-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-CertificateOfOccupancyDoc-info').val($(this).val());
                }

                var ProofFiles = $('#upload-CertificateOfOccupancyDoc-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("CertificateOfOccupancyDocError").style.display = 'none';
                }
            }
        });

    });
    function FormValidation() {
        var checkLists = JSON.stringify(docChecklists);
        $('#hiddenChecklists').val(checkLists);
        $('#create-form').submit();
    }
</script>

