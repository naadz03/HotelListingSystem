@model HotelListingSystem.Models.Room

@{
    ViewBag.Title = "Create";
    Layout = null;
}
<head>
    @Html.Partial("_eHead")
</head>

<body>
    <main>
        <div class="container_body">

            <h4>Add Room</h4>



            @if (ViewBag.AddRooms != null && !string.IsNullOrEmpty(ViewBag.AddRooms))
            {
                <div class="col-9 alert alert-info">
                    Please add rooms to your newly created hotel.
                </div>
            }
            @using (Html.BeginForm("Create", "Rooms", null, FormMethod.Post, new { enctype = "multipart/form-data", id = "create-form" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <hr />
                    <input type="text" hidden id="hiddenChecklists" name="hiddenChecklists" />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @if (ViewBag.AddRooms == null && string.IsNullOrEmpty(ViewBag.AddRooms))
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.HotelId, "Hotel Name", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.DropDownList("HotelId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.HotelId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.HotelId)
                    }
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Sleeps, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.Sleeps, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Sleeps, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.NoOfBeds, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.NoOfBeds, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NoOfBeds, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Baths, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.Baths, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Baths, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Balcony, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Balcony, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Balcony, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PricePerRoom, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-3">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.PricePerRoom, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                @Html.ValidationMessageFor(model => model.PricePerRoom, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Room Image 1:", new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            <div class="input-group">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                        Browse&hellip; <input type="file" id="RoomImage1" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg">
                                    </span>
                                </label>
                                <input type="text" class="form-control col-md-4" id="upload-RoomImage1-info" readonly>
                            </div>
                            <span class="text-danger" style="display:none" id="RoomImage1Error"></span>

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Room Image 2", new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            <div class="input-group">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                        Browse&hellip; <input type="file" id="RoomImage2" name="documents" style="display: none;" accept="image/x-png,image/jpg,image/jpeg,application/pdf">
                                    </span>
                                </label>
                                <input type="text" class="form-control col-md-4" id="upload-RoomImage2-info" readonly>
                            </div>
                            <span class="text-danger" style="display:none" id="RoomImage2Error"></span>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-3">
                            @*<input type="submit" value="Create" class="btn btn-default" />*@
                            <input type="button" onclick="FormValidation()" value="Create" class="btn btn-outline-dark" />
                        </div>
                    </div>
                </div>
            }

            <div>
                @Html.ActionLink("Back to List", "Index", new { id = 0 }, new { @class = "btn btn-primary" })
            </div>
        </div>
    </main>
</body>

@Html.Partial("_eFooter")

<script typeof="text/javascript">
    var docChecklists = [];
    const allowedExtensions = [".png", ".jpg", ".jpeg", ".pdf"];



    $(document).ready(function () {
        ////Proof of address
        $('#RoomImage1').on('change', function (event) {

            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-RoomImage1-info').val("");
                document.getElementById("RoomImage1Error").style.display = 'block';
                document.getElementById("RoomImage1Error").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-RoomImage1-info').val("");
                document.getElementById("RoomImage1Error").style.display = 'block';
                document.getElementById("RoomImage1Error").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-RoomImage1-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-RoomImage1-info').val($(this).val());
                }

                var ProofFiles = $('#upload-RoomImage1-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("RoomImage1Error").style.display = 'none';
                }
            }
        });


        $('#RoomImage2').on('change', function (event) {
            var hasInvalidFiles = false;
            var hasOverSizeFile = false;

            var numFiles = this.files.length;
            const fileSize = this.files[0].size / 1024 / 1024; // in MiB

            if (fileSize > 2) {
                /*alert('File size exceeds 2 MiB');*/
                hasOverSizeFile = true;
                $(this.files).val(''); //for clearing with Jquery
            }
            else {
                // Check that the file extension is supported.
                // If not, clear the input.
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];

                    for (i = 0; i < allowedExtensions.length; i++) {
                        if (!file.name.endsWith(allowedExtensions[i])) {
                            hasInvalidFiles = true;
                        }
                        else {
                            hasInvalidFiles = false;
                            docChecklists.push(file.name);
                            break;
                        }
                    }
                }
            }

            //// Address Doc Validation
            if (hasOverSizeFile) {
                $('#upload-RoomImage2-info').val("");
                document.getElementById("RoomImage2Error").style.display = 'block';
                document.getElementById("RoomImage2Error").innerHTML = "File size exceeds 2 MB.";
            }
            else if (hasInvalidFiles) {
                $('#upload-RoomImage2-info').val("");
                document.getElementById("RoomImage2Error").style.display = 'block';
                document.getElementById("RoomImage2Error").innerHTML = "Unsupported file selected.";
            }
            else {
                if (numFiles > 1) {
                    $('#upload-RoomImage2-info').val(numFiles + " files selected");
                }
                else {
                    $('#upload-RoomImage2-info').val($(this).val());
                }

                var ProofFiles = $('#upload-RoomImage2-info').val();
                if (ProofFiles != null && ProofFiles != "") {
                    document.getElementById("RoomImage2Error").style.display = 'none';
                }
            }
        });



    });
    function FormValidation() {
        var checkLists = JSON.stringify(docChecklists);
        $('#hiddenChecklists').val(checkLists);
        $('#create-form').submit();
    }
</script>